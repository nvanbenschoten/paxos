// Code generated by protoc-gen-go.
// source: paxos/paxospb/paxos.proto
// DO NOT EDIT!

/*
Package paxospb is a generated protocol buffer package.

It is generated from these files:
	paxos/paxospb/paxos.proto

It has these top-level messages:
	ClientUpdate
	ViewChange
	ViewChangeProof
	Prepare
	PrepareOK
	Proposal
	Accept
	GloballyOrderedUpdate
	Message
	PersistentState
*/
package paxospb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ClientUpdate struct {
	// the unique identifier of the sending client.
	ClientId uint64 `protobuf:"varint,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	// the unique identifier of this client's node.
	NodeId uint64 `protobuf:"varint,2,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// the client sequence number for this update.
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	// the update being initiate by the client.
	Update []byte `protobuf:"bytes,4,opt,name=update,proto3" json:"update,omitempty"`
}

func (m *ClientUpdate) Reset()                    { *m = ClientUpdate{} }
func (m *ClientUpdate) String() string            { return proto.CompactTextString(m) }
func (*ClientUpdate) ProtoMessage()               {}
func (*ClientUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ClientUpdate) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *ClientUpdate) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *ClientUpdate) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ClientUpdate) GetUpdate() []byte {
	if m != nil {
		return m.Update
	}
	return nil
}

type ViewChange struct {
	// the unique identifier of the sending node.
	NodeId uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// the view number this node is trying to install.
	AttemptedView uint64 `protobuf:"varint,2,opt,name=attempted_view,json=attemptedView" json:"attempted_view,omitempty"`
}

func (m *ViewChange) Reset()                    { *m = ViewChange{} }
func (m *ViewChange) String() string            { return proto.CompactTextString(m) }
func (*ViewChange) ProtoMessage()               {}
func (*ViewChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ViewChange) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *ViewChange) GetAttemptedView() uint64 {
	if m != nil {
		return m.AttemptedView
	}
	return 0
}

type ViewChangeProof struct {
	// the unique identifier of the sending node.
	NodeId uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// the last view number this node installed.
	InstalledView uint64 `protobuf:"varint,2,opt,name=installed_view,json=installedView" json:"installed_view,omitempty"`
}

func (m *ViewChangeProof) Reset()                    { *m = ViewChangeProof{} }
func (m *ViewChangeProof) String() string            { return proto.CompactTextString(m) }
func (*ViewChangeProof) ProtoMessage()               {}
func (*ViewChangeProof) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ViewChangeProof) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *ViewChangeProof) GetInstalledView() uint64 {
	if m != nil {
		return m.InstalledView
	}
	return 0
}

type Prepare struct {
	// the unique identifier of the sending node.
	NodeId uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// the view number being prepared.
	View uint64 `protobuf:"varint,2,opt,name=view" json:"view,omitempty"`
	// the local aru value of the leader.
	LocalAru uint64 `protobuf:"varint,3,opt,name=local_aru,json=localAru" json:"local_aru,omitempty"`
}

func (m *Prepare) Reset()                    { *m = Prepare{} }
func (m *Prepare) String() string            { return proto.CompactTextString(m) }
func (*Prepare) ProtoMessage()               {}
func (*Prepare) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Prepare) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *Prepare) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *Prepare) GetLocalAru() uint64 {
	if m != nil {
		return m.LocalAru
	}
	return 0
}

type PrepareOK struct {
	// the unique identifier of the sending node.
	NodeId uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// the view number for which this message applies.
	View uint64 `protobuf:"varint,2,opt,name=view" json:"view,omitempty"`
	// the list of Proposals and GloballyOrderedUpdates.
	DataList []*Message `protobuf:"bytes,3,rep,name=data_list,json=dataList" json:"data_list,omitempty"`
}

func (m *PrepareOK) Reset()                    { *m = PrepareOK{} }
func (m *PrepareOK) String() string            { return proto.CompactTextString(m) }
func (*PrepareOK) ProtoMessage()               {}
func (*PrepareOK) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PrepareOK) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *PrepareOK) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *PrepareOK) GetDataList() []*Message {
	if m != nil {
		return m.DataList
	}
	return nil
}

type Proposal struct {
	// the unique identifier of the sending node.
	NodeId uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// the view number in which this proposal is being made.
	View uint64 `protobuf:"varint,2,opt,name=view" json:"view,omitempty"`
	// the sequence number of this proposal.
	Seq uint64 `protobuf:"varint,3,opt,name=seq" json:"seq,omitempty"`
	// the client update being bound to seq in this proposal.
	Update *ClientUpdate `protobuf:"bytes,4,opt,name=update" json:"update,omitempty"`
}

func (m *Proposal) Reset()                    { *m = Proposal{} }
func (m *Proposal) String() string            { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()               {}
func (*Proposal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Proposal) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *Proposal) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *Proposal) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *Proposal) GetUpdate() *ClientUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

type Accept struct {
	// the unique identifier of the sending node.
	NodeId uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// the view number for which this message applies.
	View uint64 `protobuf:"varint,2,opt,name=view" json:"view,omitempty"`
	// the sequence number of the associated Proposal.
	Seq uint64 `protobuf:"varint,3,opt,name=seq" json:"seq,omitempty"`
}

func (m *Accept) Reset()                    { *m = Accept{} }
func (m *Accept) String() string            { return proto.CompactTextString(m) }
func (*Accept) ProtoMessage()               {}
func (*Accept) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Accept) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *Accept) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *Accept) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type GloballyOrderedUpdate struct {
	// the unique identifier of the sending node.
	NodeId uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// the sequence number of the update that was ordered.
	Seq uint64 `protobuf:"varint,2,opt,name=seq" json:"seq,omitempty"`
	// the client update bound to seq and globally ordered.
	Update *ClientUpdate `protobuf:"bytes,3,opt,name=update" json:"update,omitempty"`
}

func (m *GloballyOrderedUpdate) Reset()                    { *m = GloballyOrderedUpdate{} }
func (m *GloballyOrderedUpdate) String() string            { return proto.CompactTextString(m) }
func (*GloballyOrderedUpdate) ProtoMessage()               {}
func (*GloballyOrderedUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GloballyOrderedUpdate) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *GloballyOrderedUpdate) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *GloballyOrderedUpdate) GetUpdate() *ClientUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

type Message struct {
	// the destination of this message.
	To uint64 `protobuf:"varint,1,opt,name=to" json:"to,omitempty"`
	// the type of the message.
	//
	// Types that are valid to be assigned to Type:
	//	*Message_ViewChange
	//	*Message_ViewChangeProof
	//	*Message_Prepare
	//	*Message_PrepareOk
	//	*Message_Proposal
	//	*Message_Accept
	//	*Message_GloballyOrderedUpdate
	//	*Message_ClientUpdate
	Type isMessage_Type `protobuf_oneof:"type"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type isMessage_Type interface {
	isMessage_Type()
}

type Message_ViewChange struct {
	ViewChange *ViewChange `protobuf:"bytes,2,opt,name=view_change,json=viewChange,oneof"`
}
type Message_ViewChangeProof struct {
	ViewChangeProof *ViewChangeProof `protobuf:"bytes,3,opt,name=view_change_proof,json=viewChangeProof,oneof"`
}
type Message_Prepare struct {
	Prepare *Prepare `protobuf:"bytes,4,opt,name=prepare,oneof"`
}
type Message_PrepareOk struct {
	PrepareOk *PrepareOK `protobuf:"bytes,5,opt,name=prepare_ok,json=prepareOk,oneof"`
}
type Message_Proposal struct {
	Proposal *Proposal `protobuf:"bytes,6,opt,name=proposal,oneof"`
}
type Message_Accept struct {
	Accept *Accept `protobuf:"bytes,7,opt,name=accept,oneof"`
}
type Message_GloballyOrderedUpdate struct {
	GloballyOrderedUpdate *GloballyOrderedUpdate `protobuf:"bytes,8,opt,name=globally_ordered_update,json=globallyOrderedUpdate,oneof"`
}
type Message_ClientUpdate struct {
	ClientUpdate *ClientUpdate `protobuf:"bytes,9,opt,name=client_update,json=clientUpdate,oneof"`
}

func (*Message_ViewChange) isMessage_Type()            {}
func (*Message_ViewChangeProof) isMessage_Type()       {}
func (*Message_Prepare) isMessage_Type()               {}
func (*Message_PrepareOk) isMessage_Type()             {}
func (*Message_Proposal) isMessage_Type()              {}
func (*Message_Accept) isMessage_Type()                {}
func (*Message_GloballyOrderedUpdate) isMessage_Type() {}
func (*Message_ClientUpdate) isMessage_Type()          {}

func (m *Message) GetType() isMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Message) GetTo() uint64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *Message) GetViewChange() *ViewChange {
	if x, ok := m.GetType().(*Message_ViewChange); ok {
		return x.ViewChange
	}
	return nil
}

func (m *Message) GetViewChangeProof() *ViewChangeProof {
	if x, ok := m.GetType().(*Message_ViewChangeProof); ok {
		return x.ViewChangeProof
	}
	return nil
}

func (m *Message) GetPrepare() *Prepare {
	if x, ok := m.GetType().(*Message_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (m *Message) GetPrepareOk() *PrepareOK {
	if x, ok := m.GetType().(*Message_PrepareOk); ok {
		return x.PrepareOk
	}
	return nil
}

func (m *Message) GetProposal() *Proposal {
	if x, ok := m.GetType().(*Message_Proposal); ok {
		return x.Proposal
	}
	return nil
}

func (m *Message) GetAccept() *Accept {
	if x, ok := m.GetType().(*Message_Accept); ok {
		return x.Accept
	}
	return nil
}

func (m *Message) GetGloballyOrderedUpdate() *GloballyOrderedUpdate {
	if x, ok := m.GetType().(*Message_GloballyOrderedUpdate); ok {
		return x.GloballyOrderedUpdate
	}
	return nil
}

func (m *Message) GetClientUpdate() *ClientUpdate {
	if x, ok := m.GetType().(*Message_ClientUpdate); ok {
		return x.ClientUpdate
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_ViewChange)(nil),
		(*Message_ViewChangeProof)(nil),
		(*Message_Prepare)(nil),
		(*Message_PrepareOk)(nil),
		(*Message_Proposal)(nil),
		(*Message_Accept)(nil),
		(*Message_GloballyOrderedUpdate)(nil),
		(*Message_ClientUpdate)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// type
	switch x := m.Type.(type) {
	case *Message_ViewChange:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ViewChange); err != nil {
			return err
		}
	case *Message_ViewChangeProof:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ViewChangeProof); err != nil {
			return err
		}
	case *Message_Prepare:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prepare); err != nil {
			return err
		}
	case *Message_PrepareOk:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrepareOk); err != nil {
			return err
		}
	case *Message_Proposal:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Proposal); err != nil {
			return err
		}
	case *Message_Accept:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Accept); err != nil {
			return err
		}
	case *Message_GloballyOrderedUpdate:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GloballyOrderedUpdate); err != nil {
			return err
		}
	case *Message_ClientUpdate:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClientUpdate); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Type has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 2: // type.view_change
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ViewChange)
		err := b.DecodeMessage(msg)
		m.Type = &Message_ViewChange{msg}
		return true, err
	case 3: // type.view_change_proof
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ViewChangeProof)
		err := b.DecodeMessage(msg)
		m.Type = &Message_ViewChangeProof{msg}
		return true, err
	case 4: // type.prepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Prepare)
		err := b.DecodeMessage(msg)
		m.Type = &Message_Prepare{msg}
		return true, err
	case 5: // type.prepare_ok
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PrepareOK)
		err := b.DecodeMessage(msg)
		m.Type = &Message_PrepareOk{msg}
		return true, err
	case 6: // type.proposal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Proposal)
		err := b.DecodeMessage(msg)
		m.Type = &Message_Proposal{msg}
		return true, err
	case 7: // type.accept
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Accept)
		err := b.DecodeMessage(msg)
		m.Type = &Message_Accept{msg}
		return true, err
	case 8: // type.globally_ordered_update
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GloballyOrderedUpdate)
		err := b.DecodeMessage(msg)
		m.Type = &Message_GloballyOrderedUpdate{msg}
		return true, err
	case 9: // type.client_update
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClientUpdate)
		err := b.DecodeMessage(msg)
		m.Type = &Message_ClientUpdate{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// type
	switch x := m.Type.(type) {
	case *Message_ViewChange:
		s := proto.Size(x.ViewChange)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_ViewChangeProof:
		s := proto.Size(x.ViewChangeProof)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Prepare:
		s := proto.Size(x.Prepare)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PrepareOk:
		s := proto.Size(x.PrepareOk)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Proposal:
		s := proto.Size(x.Proposal)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Accept:
		s := proto.Size(x.Accept)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_GloballyOrderedUpdate:
		s := proto.Size(x.GloballyOrderedUpdate)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_ClientUpdate:
		s := proto.Size(x.ClientUpdate)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PersistentState struct {
	// the unique identifier of this node.
	NodeId uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// the number of nodes in this paxos instance.
	NodeCount uint64 `protobuf:"varint,2,opt,name=node_count,json=nodeCount" json:"node_count,omitempty"`
	// the last installed view number.
	LastInstalled uint64 `protobuf:"varint,3,opt,name=last_installed,json=lastInstalled" json:"last_installed,omitempty"`
	// the latest prepare message.
	Prepare *Prepare `protobuf:"bytes,4,opt,name=prepare" json:"prepare,omitempty"`
	// the latest accepted proposal.
	Proposal *Proposal `protobuf:"bytes,5,opt,name=proposal" json:"proposal,omitempty"`
}

func (m *PersistentState) Reset()                    { *m = PersistentState{} }
func (m *PersistentState) String() string            { return proto.CompactTextString(m) }
func (*PersistentState) ProtoMessage()               {}
func (*PersistentState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PersistentState) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *PersistentState) GetNodeCount() uint64 {
	if m != nil {
		return m.NodeCount
	}
	return 0
}

func (m *PersistentState) GetLastInstalled() uint64 {
	if m != nil {
		return m.LastInstalled
	}
	return 0
}

func (m *PersistentState) GetPrepare() *Prepare {
	if m != nil {
		return m.Prepare
	}
	return nil
}

func (m *PersistentState) GetProposal() *Proposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

func init() {
	proto.RegisterType((*ClientUpdate)(nil), "paxospb.ClientUpdate")
	proto.RegisterType((*ViewChange)(nil), "paxospb.ViewChange")
	proto.RegisterType((*ViewChangeProof)(nil), "paxospb.ViewChangeProof")
	proto.RegisterType((*Prepare)(nil), "paxospb.Prepare")
	proto.RegisterType((*PrepareOK)(nil), "paxospb.PrepareOK")
	proto.RegisterType((*Proposal)(nil), "paxospb.Proposal")
	proto.RegisterType((*Accept)(nil), "paxospb.Accept")
	proto.RegisterType((*GloballyOrderedUpdate)(nil), "paxospb.GloballyOrderedUpdate")
	proto.RegisterType((*Message)(nil), "paxospb.Message")
	proto.RegisterType((*PersistentState)(nil), "paxospb.PersistentState")
}

func init() { proto.RegisterFile("paxos/paxospb/paxos.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 615 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x5b, 0x4f, 0xdc, 0x3c,
	0x10, 0xcd, 0x5e, 0xc8, 0x26, 0xb3, 0xc0, 0x82, 0x3f, 0xf1, 0x91, 0xaa, 0x17, 0xa1, 0x48, 0x95,
	0x68, 0x55, 0x40, 0x02, 0xa9, 0x4f, 0x7d, 0xa1, 0x48, 0x25, 0x08, 0xaa, 0xdd, 0x06, 0xb5, 0xea,
	0x5b, 0x64, 0x12, 0x77, 0x1b, 0x11, 0x62, 0x13, 0x7b, 0xb9, 0xf4, 0x2f, 0xf6, 0x0f, 0xf5, 0xb1,
	0xb2, 0x33, 0x24, 0x61, 0xb5, 0x6c, 0x8b, 0xfa, 0x92, 0xd8, 0x67, 0x66, 0xce, 0x8c, 0x7c, 0x8e,
	0x06, 0x9e, 0x08, 0x7a, 0xc3, 0xe5, 0x8e, 0xf9, 0x8a, 0xb3, 0xf2, 0xbf, 0x2d, 0x0a, 0xae, 0x38,
	0xe9, 0x21, 0xe8, 0xff, 0x80, 0xc5, 0x83, 0x2c, 0x65, 0xb9, 0xfa, 0x2c, 0x12, 0xaa, 0x18, 0x79,
	0x0a, 0x6e, 0x6c, 0xee, 0x51, 0x9a, 0x78, 0xad, 0x8d, 0xd6, 0x66, 0x37, 0x74, 0x4a, 0xe0, 0x28,
	0x21, 0xeb, 0xd0, 0xcb, 0x79, 0xc2, 0x74, 0xa8, 0x6d, 0x42, 0xb6, 0xbe, 0x1e, 0x25, 0xe4, 0x19,
	0xb8, 0x2a, 0xbd, 0x60, 0x52, 0xd1, 0x0b, 0xe1, 0x75, 0x4c, 0xa8, 0x06, 0xc8, 0xff, 0x60, 0x4f,
	0x0c, 0xbb, 0xd7, 0xdd, 0x68, 0x6d, 0x2e, 0x86, 0x78, 0xf3, 0x4f, 0x00, 0xbe, 0xa4, 0xec, 0xfa,
	0xe0, 0x3b, 0xcd, 0xc7, 0xac, 0x49, 0xde, 0xba, 0x47, 0xfe, 0x12, 0x96, 0xa9, 0x52, 0xec, 0x42,
	0x28, 0x96, 0x44, 0x57, 0x29, 0xbb, 0xc6, 0xe6, 0x4b, 0x15, 0xaa, 0x59, 0xfc, 0x4f, 0x30, 0xa8,
	0xd9, 0x46, 0x05, 0xe7, 0xdf, 0xe6, 0x52, 0xa6, 0xb9, 0x54, 0x34, 0xcb, 0xa6, 0x28, 0x2b, 0xd4,
	0x50, 0x9e, 0x42, 0x6f, 0x54, 0x30, 0x41, 0x8b, 0x39, 0xd3, 0x11, 0xe8, 0x36, 0x08, 0xcc, 0x59,
	0x3f, 0x62, 0xc6, 0x63, 0x9a, 0x45, 0xb4, 0x98, 0xe0, 0x73, 0x38, 0x06, 0xd8, 0x2f, 0x26, 0xfe,
	0x18, 0x5c, 0x24, 0x1d, 0x1e, 0x3f, 0x8e, 0x76, 0x0b, 0xdc, 0x84, 0x2a, 0x1a, 0x65, 0xa9, 0x54,
	0x5e, 0x67, 0xa3, 0xb3, 0xd9, 0xdf, 0x5d, 0xd9, 0x46, 0x21, 0xb7, 0x3f, 0x32, 0x29, 0xe9, 0x98,
	0x85, 0x8e, 0x4e, 0x39, 0x49, 0xa5, 0xf2, 0x6f, 0xc0, 0x19, 0x15, 0x5c, 0x70, 0x49, 0xb3, 0xc7,
	0xf5, 0x59, 0x81, 0x8e, 0x64, 0x97, 0x38, 0xb8, 0x3e, 0x92, 0xad, 0x7b, 0x0a, 0xf6, 0x77, 0xd7,
	0xaa, 0xb6, 0x4d, 0xf3, 0x54, 0xc2, 0x1e, 0x82, 0xbd, 0x1f, 0xc7, 0x4c, 0xa8, 0x7f, 0xec, 0xeb,
	0x5f, 0xc2, 0xda, 0x61, 0xc6, 0xcf, 0x68, 0x96, 0xdd, 0x0e, 0x8b, 0x84, 0x15, 0x2c, 0x41, 0x9b,
	0x3e, 0xc8, 0x8b, 0x1c, 0xed, 0x59, 0xb3, 0x77, 0xfe, 0x66, 0xf6, 0x5f, 0x1d, 0xe8, 0xe1, 0x5b,
	0x92, 0x65, 0x68, 0x2b, 0x8e, 0x0d, 0xda, 0x8a, 0x93, 0xb7, 0xd0, 0xd7, 0x83, 0x46, 0xb1, 0xf1,
	0x98, 0x69, 0xd2, 0xdf, 0xfd, 0xaf, 0xe2, 0xab, 0xed, 0x17, 0x58, 0x21, 0x5c, 0xd5, 0xd6, 0xfe,
	0x00, 0xab, 0x8d, 0xba, 0x48, 0x68, 0x73, 0xe2, 0x34, 0xde, 0x8c, 0x6a, 0x63, 0xde, 0xc0, 0x0a,
	0x07, 0x57, 0x53, 0x7e, 0x7e, 0x03, 0x3d, 0x51, 0x5a, 0x07, 0x75, 0xa8, 0xe5, 0x47, 0x4b, 0x05,
	0x56, 0x78, 0x97, 0x42, 0xf6, 0x00, 0xf0, 0x18, 0xf1, 0x73, 0x6f, 0xc1, 0x14, 0x90, 0xe9, 0x82,
	0xe1, 0x71, 0x60, 0x85, 0x2e, 0xe6, 0x0d, 0xcf, 0xc9, 0x0e, 0x38, 0x02, 0x4d, 0xe3, 0xd9, 0xa6,
	0x64, 0xb5, 0x51, 0x52, 0x06, 0x02, 0x2b, 0xac, 0x92, 0xc8, 0x2b, 0xb0, 0xa9, 0xd1, 0xda, 0xeb,
	0x99, 0xf4, 0x41, 0x95, 0x5e, 0x5a, 0x20, 0xb0, 0x42, 0x4c, 0x20, 0x5f, 0x61, 0x7d, 0x8c, 0x6a,
	0x46, 0xbc, 0x94, 0x33, 0x42, 0x69, 0x1c, 0x53, 0xfb, 0xa2, 0xaa, 0x9d, 0xa9, 0x7a, 0x60, 0x85,
	0x6b, 0xe3, 0x99, 0x76, 0x78, 0x07, 0x4b, 0xb8, 0xb5, 0x90, 0xcf, 0x9d, 0x23, 0x75, 0x60, 0x85,
	0x8b, 0x71, 0xe3, 0xfe, 0xde, 0x86, 0xae, 0xba, 0x15, 0xcc, 0xff, 0xd9, 0x82, 0xc1, 0x88, 0x15,
	0x32, 0x95, 0x8a, 0xe5, 0xea, 0x54, 0xcd, 0x35, 0xda, 0x73, 0x00, 0x13, 0x88, 0xf9, 0x24, 0x57,
	0xe8, 0x37, 0x57, 0x23, 0x07, 0x1a, 0xd0, 0x1b, 0x26, 0xa3, 0x52, 0x45, 0xd5, 0x42, 0x41, 0x5b,
	0x2f, 0x69, 0xf4, 0xe8, 0x0e, 0x24, 0xaf, 0xff, 0xa8, 0x68, 0xad, 0xe7, 0x56, 0x43, 0x9a, 0x85,
	0x07, 0xa4, 0xa9, 0x85, 0x39, 0xb3, 0xcd, 0xa6, 0xdf, 0xfb, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xa5,
	0x0e, 0x2b, 0x81, 0x06, 0x06, 0x00, 0x00,
}
